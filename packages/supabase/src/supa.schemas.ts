// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./supa.modified.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const documentSectionsRowSchema = z.object({
  content: z.string(),
  document_id: z.number(),
  embedding: z.string().nullable(),
  id: z.number(),
});

export const documentSectionsInsertSchema = z.object({
  content: z.string(),
  document_id: z.number(),
  embedding: z.string().optional().nullable(),
  id: z.never().optional(),
});

export const documentSectionsUpdateSchema = z.object({
  content: z.string().optional(),
  document_id: z.number().optional(),
  embedding: z.string().optional().nullable(),
  id: z.never().optional(),
});

export const documentSectionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("document_sections_document_id_fkey"),
    columns: z.tuple([z.literal("document_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("documents"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("document_sections_document_id_fkey"),
    columns: z.tuple([z.literal("document_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("documents_with_storage_path"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const documentsRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  id: z.number(),
  name: z.string(),
  storage_object_id: z.string(),
});

export const documentsInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  id: z.never().optional(),
  name: z.string(),
  storage_object_id: z.string(),
});

export const documentsUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  id: z.never().optional(),
  name: z.string().optional(),
  storage_object_id: z.string().optional(),
});

export const documentsRelationshipsSchema = z.tuple([]);

export const marketRowSchema = z.object({
  address: z.string(),
  base_asset: z.string(),
  created_at: z.string(),
  label: z.string(),
  owner: z.string(),
  quote_asset: z.string(),
});

export const marketInsertSchema = z.object({
  address: z.string(),
  base_asset: z.string(),
  created_at: z.string().optional(),
  label: z.string(),
  owner: z.string(),
  quote_asset: z.string(),
});

export const marketUpdateSchema = z.object({
  address: z.string().optional(),
  base_asset: z.string().optional(),
  created_at: z.string().optional(),
  label: z.string().optional(),
  owner: z.string().optional(),
  quote_asset: z.string().optional(),
});

export const marketRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("markets_base_asset_fkey"),
    columns: z.tuple([z.literal("base_asset")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("token"),
    referencedColumns: z.tuple([z.literal("uuid")]),
  }),
  z.object({
    foreignKeyName: z.literal("markets_quote_asset_fkey"),
    columns: z.tuple([z.literal("quote_asset")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("token"),
    referencedColumns: z.tuple([z.literal("uuid")]),
  }),
]);

export const tokenRowSchema = z.object({
  address: z.string(),
  chain_id: z.number(),
  created_at: z.string(),
  decimals: z.number().nullable(),
  name: z.string(),
  symbol: z.string(),
  uuid: z.string(),
});

export const tokenInsertSchema = z.object({
  address: z.string(),
  chain_id: z.number(),
  created_at: z.string().optional(),
  decimals: z.number().optional().nullable(),
  name: z.string(),
  symbol: z.string(),
  uuid: z.string().optional(),
});

export const tokenUpdateSchema = z.object({
  address: z.string().optional(),
  chain_id: z.number().optional(),
  created_at: z.string().optional(),
  decimals: z.number().optional().nullable(),
  name: z.string().optional(),
  symbol: z.string().optional(),
  uuid: z.string().optional(),
});

export const tokenRelationshipsSchema = z.tuple([]);

export const userRowSchema = z.object({
  address: z.string(),
  created_at: z.string(),
  ens: z.string().nullable(),
  notifs: z.boolean().nullable(),
  telegram: z.string().nullable(),
});

export const userInsertSchema = z.object({
  address: z.string(),
  created_at: z.string().optional(),
  ens: z.string().optional().nullable(),
  notifs: z.boolean().optional().nullable(),
  telegram: z.string().optional().nullable(),
});

export const userUpdateSchema = z.object({
  address: z.string().optional(),
  created_at: z.string().optional(),
  ens: z.string().optional().nullable(),
  notifs: z.boolean().optional().nullable(),
  telegram: z.string().optional().nullable(),
});

export const userRelationshipsSchema = z.tuple([]);

export const documentsWithStoragePathRowSchema = z.object({
  created_at: z.string().nullable(),
  created_by: z.string().nullable(),
  id: z.number().nullable(),
  name: z.string().nullable(),
  storage_object_id: z.string().nullable(),
  storage_object_path: z.string().nullable(),
});

export const documentsWithStoragePathRelationshipsSchema = z.tuple([]);
